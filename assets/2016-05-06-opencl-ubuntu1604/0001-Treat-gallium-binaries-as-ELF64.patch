From 6d0910601e12002e7c6e171b8c4ac3cd3c738ecb Mon Sep 17 00:00:00 2001
From: "Wladimir J. van der Laan" <laanwj@gmail.com>
Date: Fri, 6 May 2016 07:39:49 +0200
Subject: [PATCH] Treat gallium binaries as ELF64

---
 CLRX/amdbin/GalliumBinaries.h |  2 +-
 amdbin/GalliumBinaries.cpp    | 12 ++++++------
 2 files changed, 7 insertions(+), 7 deletions(-)

diff --git a/CLRX/amdbin/GalliumBinaries.h b/CLRX/amdbin/GalliumBinaries.h
index 6c4d057..3617262 100644
--- a/CLRX/amdbin/GalliumBinaries.h
+++ b/CLRX/amdbin/GalliumBinaries.h
@@ -135,7 +135,7 @@ struct GalliumSection
  */
 /// Gallium ELF binary
 /** ULEV function is required to access programInfoEntry fields */
-class GalliumElfBinary: public ElfBinary32
+class GalliumElfBinary: public ElfBinary64
 {
 public:
     /// program info entry index map
diff --git a/amdbin/GalliumBinaries.cpp b/amdbin/GalliumBinaries.cpp
index 52cf1ad..9e682ba 100644
--- a/amdbin/GalliumBinaries.cpp
+++ b/amdbin/GalliumBinaries.cpp
@@ -40,7 +40,7 @@ GalliumElfBinary::GalliumElfBinary() :
 
 GalliumElfBinary::GalliumElfBinary(size_t binaryCodeSize, cxbyte* binaryCode,
                Flags creationFlags) : 
-       ElfBinary32(binaryCodeSize, binaryCode, creationFlags),
+       ElfBinary64(binaryCodeSize, binaryCode, creationFlags),
        progInfosNum(0), progInfoEntries(nullptr), disasmSize(0), disasmOffset(0)
        
 {
@@ -57,7 +57,7 @@ GalliumElfBinary::GalliumElfBinary(size_t binaryCodeSize, cxbyte* binaryCode,
     { }
     if (amdGpuDisasmIndex != SHN_UNDEF)
     {   // set disassembler section
-        const Elf32_Shdr& shdr = getSectionHeader(amdGpuDisasmIndex);
+        const Elf64_Shdr& shdr = getSectionHeader(amdGpuDisasmIndex);
         disasmOffset = ULEV(shdr.sh_offset);
         disasmSize = ULEV(shdr.sh_size);
     }
@@ -75,7 +75,7 @@ GalliumElfBinary::GalliumElfBinary(size_t binaryCodeSize, cxbyte* binaryCode,
     if (amdGpuConfigIndex == SHN_UNDEF || textIndex == SHN_UNDEF)
         return;
     // create amdGPU config systems
-    const Elf32_Shdr& shdr = getSectionHeader(amdGpuConfigIndex);
+    const Elf64_Shdr& shdr = getSectionHeader(amdGpuConfigIndex);
     if ((ULEV(shdr.sh_size) % 24U) != 0)
         throw Exception("Wrong size of .AMDGPU.config section!");
     
@@ -86,9 +86,9 @@ GalliumElfBinary::GalliumElfBinary(size_t binaryCodeSize, cxbyte* binaryCode,
         progInfoEntryMap.resize(symbolsNum);
     for (cxuint i = 0; i < symbolsNum; i++)
     {
-        const Elf32_Sym& sym = getSymbol(i);
+        const Elf64_Sym& sym = getSymbol(i);
         const char* symName = getSymbolName(i);
-        if (ULEV(sym.st_shndx) == textIndex && ELF32_ST_BIND(sym.st_info) == STB_GLOBAL)
+        if (ULEV(sym.st_shndx) == textIndex && ELF64_ST_BIND(sym.st_info) == STB_GLOBAL)
         {
             if (ULEV(sym.st_value) >= textSize)
                 throw Exception("kernel symbol offset out of range");
@@ -262,7 +262,7 @@ GalliumBinary::GalliumBinary(size_t _binaryCodeSize, cxbyte* _binaryCode,
         const GalliumKernel& kernel = kernels[i];
         for (; symIndex < symsNum; symIndex++)
         {
-            const Elf32_Sym& sym = elfBinary.getSymbol(symIndex);
+            const Elf64_Sym& sym = elfBinary.getSymbol(symIndex);
             const char* symName = elfBinary.getSymbolName(symIndex);
             // kernel symol must be defined as global and must be bound to text section
             if (ULEV(sym.st_shndx) == textIndex && ELF32_ST_BIND(sym.st_info) == STB_GLOBAL)
-- 
1.9.1

